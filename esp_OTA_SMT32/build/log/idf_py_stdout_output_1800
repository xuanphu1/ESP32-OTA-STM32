[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\esp\esp_OTA_SMT32\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/esp/esp_OTA_SMT32/build/bootloader/bootloader.bin"
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/esp_OTA_SMT32.c.obj
In file included from D:/esp/esp_OTA_SMT32/main/esp_OTA_SMT32.c:6:
D:/esp/esp_OTA_SMT32/component/Min/min.h: In function 'rx_byte':
D:/esp/esp_OTA_SMT32/component/Min/min.h:716:39: warning: comparison is always true due to limited range of data type [-Wtype-limits]
  716 |             if (self->rx_frame_length <= MAX_PAYLOAD) {
      |                                       ^~
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable esp_OTA_SMT32.elf
[6/8] Generating binary image from built executable
esptool.py v4.8.dev4
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/esp/esp_OTA_SMT32/build/esp_OTA_SMT32.bin
[7/8] cmd.exe /C "cd /D D:\esp\esp_OTA_SMT32\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/esp/esp_OTA_SMT32/build/partition_table/partition-table.bin D:/esp/esp_OTA_SMT32/build/esp_OTA_SMT32.bin"
esp_OTA_SMT32.bin binary size 0x30f40 bytes. Smallest app partition is 0x100000 bytes. 0xcf0c0 bytes (81%) free.
[7/8] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.3\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.3 -D SERIAL_TOOL=C:/Espressif/python_env/idfesptool.py --chip esp32 -p COM4 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 esp_OTA_SMT32.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.8.dev4
Serial port COM4

A fatal error occurred: Could not open COM4, the port is busy or doesn't exist.
(could not open port 'COM4': PermissionError(13, 'A device attached to the system is not functioning.', None, 31))

5.3_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.3/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=D:/esp/esp_OTA_SMT32/build -P C:/Espressif/frameworks/esp-idf-v5.3/components/esptool_py/run_serial_tool.cmake"
FAILED: CMakeFiles/flash D:/esp/esp_OTA_SMT32/build/CMakeFiles/flash 
cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.3\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.3 -D SERIAL_TOOL=C:/Espressif/python_env/idf5.3_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.3/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=D:/esp/esp_OTA_SMT32/build -P C:/Espressif/frameworks/esp-idf-v5.3/components/esptool_py/run_serial_tool.cmake"
ninja: build stopped: subcommand failed.
