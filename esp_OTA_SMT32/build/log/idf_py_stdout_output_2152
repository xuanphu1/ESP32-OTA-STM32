[1/12] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\esp\esp_OTA_SMT32\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/esp/esp_OTA_SMT32/build/bootloader/bootloader.bin"
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/10] Building C object esp-idf/processing_HEX/CMakeFiles/__idf_processing_HEX.dir/processing_data_of_file_hex.c.obj
[3/10] Linking C static library esp-idf\processing_HEX\libprocessing_HEX.a
[4/10] Linking C static library esp-idf\HostOTA_ESP32\libHostOTA_ESP32.a
[5/10] Linking C static library esp-idf\main\libmain.a
[6/10] Generating ld/sections.ld
[7/10] Building C object CMakeFiles/esp_OTA_SMT32.elf.dir/project_elf_src_esp32.c.obj
[8/10] Linking CXX executable esp_OTA_SMT32.elf
[9/10] Generating binary image from built executable
esptool.py v4.8.dev4
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/esp/esp_OTA_SMT32/build/esp_OTA_SMT32.bin
[10/10] cmd.exe /C "cd /D D:\esp\esp_OTA_SMT32\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/esp/esp_OTA_SMT32/build/partition_table/partition-table.bin D:/esp/esp_OTA_SMT32/build/esp_OTA_SMT32.bin"
esp_OTA_SMT32.bin binary size 0x31e10 bytes. Smallest app partition is 0x100000 bytes. 0xce1f0 bytes (81%) free.
